import Emittery from "emittery";
import { GraphQLSchema, printSchema } from "graphql";
import { writeFileSync } from "node:fs";
import path from "node:path";

import { Contract } from "@/config/contracts";
import { LogFilter } from "@/config/logFilters";
import { Resources } from "@/Ponder";
import { Schema } from "@/schema/types";
import { ensureDirExists } from "@/utils/exists";

import { buildContractTypes } from "./contract";
import { buildEntityTypes } from "./entity";
import { buildEventTypes } from "./event";
import { formatPrettier } from "./prettier";

export class CodegenService extends Emittery {
  private resources: Resources;
  private contracts: Contract[];
  private logFilters: LogFilter[];

  constructor({
    resources,
    contracts,
    logFilters,
  }: {
    resources: Resources;
    contracts: Contract[];
    logFilters: LogFilter[];
  }) {
    super();
    this.resources = resources;
    this.contracts = contracts;
    this.logFilters = logFilters;
  }

  generateAppFile({ schema }: { schema?: Schema } = {}) {
    const entities = schema?.entities || [];

    const raw = `
      /* Autogenerated file. Do not edit manually. */
  
      import { PonderApp } from "@ponder/core";
      import type { Block, Log, Transaction, Model, ReadOnlyContract } from "@ponder/core";
      import type { AbiParameterToPrimitiveType } from "abitype";
      import type { BlockTag, Hash } from "viem";

      /* ENTITY TYPES */

      ${buildEntityTypes(entities)}
  
      /* CONTRACT TYPES */

      ${buildContractTypes(this.contracts)}

      /* CONTEXT TYPES */

      export type Context = {
        contracts: {
          ${this.contracts
            .map((contract) => `${contract.name}: ${contract.name};`)
            .join("")}
        },
        entities: {
          ${entities
            .map((entity) => `${entity.name}: Model<${entity.name}>;`)
            .join("")}
        },
      }

  
      /* HANDLER TYPES */
    
      ${buildEventTypes(this.logFilters)}

      export const ponder = new PonderApp<AppType>();
    `;

    const final = formatPrettier(raw);

    const filePath = path.join(this.resources.options.generatedDir, "index.ts");
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");

    this.resources.logger.debug({
      service: "codegen",
      msg: `Wrote new file at generated/index.ts`,
    });
  }

  generateSchemaFile({ graphqlSchema }: { graphqlSchema: GraphQLSchema }) {
    const header = `
      """ Autogenerated file. Do not edit manually. """
    `;

    const body = printSchema(graphqlSchema);
    const final = header + body;

    const filePath = path.join(
      this.resources.options.generatedDir,
      "schema.graphql"
    );
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");

    this.resources.logger.debug({
      service: "codegen",
      msg: `Wrote new file at generated/schema.graphql`,
    });
  }
}
