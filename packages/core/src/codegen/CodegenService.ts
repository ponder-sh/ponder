import { GraphQLSchema, printSchema } from "graphql";
import { writeFileSync } from "node:fs";
import path from "node:path";

import { EventEmitter } from "@/common/EventEmitter";
import { ensureDirExists } from "@/common/utils";
import { Resources } from "@/Ponder";
import { Schema } from "@/schema/types";

import { buildEntityTypes } from "./buildEntityTypes";
import { buildEventTypes } from "./buildEventTypes";
import { formatPrettier } from "./utils";

type CodegenServiceEvents = {
  handlerError: (arg: { error: Error }) => void;
  handlerErrorCleared: () => void;
};

export class CodegenService extends EventEmitter<CodegenServiceEvents> {
  resources: Resources;

  constructor({ resources }: { resources: Resources }) {
    super();
    this.resources = resources;
  }

  generateAppFile() {
    const raw = `
      /* Autogenerated file. Do not edit manually. */

      import { PonderApp } from "@ponder/core";
      import type { AppType } from "./app";

      export const ponder = new PonderApp<AppType>();
    `;

    const final = formatPrettier(raw);

    const filePath = path.join(
      this.resources.options.GENERATED_DIR_PATH,
      "index.ts"
    );
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");
  }

  generateAppTypeFile({ schema }: { schema: Schema }) {
    const contractNames = this.resources.contracts.map(
      (contract) => contract.name
    );
    const entities = schema.entities;

    const raw = `
      /* Autogenerated file. Do not edit manually. */
  
      import type { Block, Log, Transaction } from "@ponder/core";
      import type { BigNumber, BytesLike } from "ethers";
  
      ${contractNames
        .map((name) => `import type { ${name} } from "./contracts/${name}";`)
        .join("\n")}
  
      /* CONTEXT TYPES */
  
      ${buildEntityTypes(entities)}
  
      export type Context = {
        contracts: {
          ${contractNames.map((name) => `${name}: ${name};`).join("")}
        },
        entities: {
          ${entities
            .map((entity) => `${entity.name}: ${entity.name}Model;`)
            .join("")}
        },
      }
  
      /* HANDLER TYPES */
  
      type Hash = string;
  
      ${buildEventTypes(this.resources.contracts)}
    `;

    const final = formatPrettier(raw);

    const filePath = path.join(
      this.resources.options.GENERATED_DIR_PATH,
      "app.ts"
    );
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");
  }

  generateContractTypeFiles() {
    this.resources.contracts.forEach((contract) => {
      const raw = `
        import { ReadOnlyContract } from "@ponder/core";
  
        const ${contract.name}Abi = ${JSON.stringify(
        contract.abi
      ).trimEnd()} as const;
  
        export type ${contract.name} =
          ReadOnlyContract<typeof ${contract.name}Abi>;
      `;
      const final = formatPrettier(raw);

      const filePath = path.join(
        this.resources.options.GENERATED_DIR_PATH,
        `contracts/${contract.name}.ts`
      );

      ensureDirExists(filePath);
      writeFileSync(filePath, final, "utf8");
    });
  }

  generateSchemaFile({ graphqlSchema }: { graphqlSchema: GraphQLSchema }) {
    const header = `
      """ Autogenerated file. Do not edit manually. """
    `;

    const body = printSchema(graphqlSchema);
    const final = header + body;

    const filePath = path.join(
      this.resources.options.GENERATED_DIR_PATH,
      "schema.graphql"
    );
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");
  }
}
