import Emittery from "emittery";
import { GraphQLSchema, printSchema } from "graphql";
import { writeFileSync } from "node:fs";
import path from "node:path";

import { ensureDirExists } from "@/common/utils";
import { Resources } from "@/Ponder";
import { Schema } from "@/schema/types";

import { buildEntityTypes } from "./buildEntityTypes";
import { buildEventTypes } from "./buildEventTypes";
import { formatPrettier } from "./utils";

export class CodegenService extends Emittery {
  resources: Resources;

  constructor({ resources }: { resources: Resources }) {
    super();
    this.resources = resources;
  }

  generateAppFile({ schema }: { schema?: Schema } = {}) {
    const entities = schema?.entities || [];

    const raw = `
      /* Autogenerated file. Do not edit manually. */
  
      import { PonderApp } from "@ponder/core";
      import type { Block, Log, Transaction, Model } from "@ponder/core";
      import type { AbiParameterToPrimitiveType, Abi } from "abitype";
      import type { Hash, GetContractReturnType, PublicClient } from "viem";

      /* ENTITY TYPES */

      ${buildEntityTypes(entities)}
  
      /* CONTRACT TYPES */

      ${this.resources.contracts
        .map(
          (contract) =>
            `const ${contract.name}Abi = ${JSON.stringify(
              contract.abi
            )} as const`
        )
        .join("\n")}

      type ReadOnlyContract<TAbi extends readonly unknown[] | Abi = Abi> = Pick<
        GetContractReturnType<TAbi, PublicClient> & { read: {} },
        "read"
      >;

      /* CONTEXT TYPES */

      export type Context = {
        contracts: {
          ${this.resources.contracts
            .map(
              (contract) =>
                `${contract.name}: ReadOnlyContract<typeof ${contract.name}Abi>;`
            )
            .join("")}
        },
        entities: {
          ${entities
            .map((entity) => `${entity.name}: Model<${entity.name}>;`)
            .join("")}
        },
      }

  
      /* HANDLER TYPES */
    
      ${buildEventTypes(this.resources.logFilters)}

      export const ponder = new PonderApp<AppType>();
    `;

    const final = formatPrettier(raw);

    const filePath = path.join(this.resources.options.generatedDir, "index.ts");
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");
  }

  generateSchemaFile({ graphqlSchema }: { graphqlSchema: GraphQLSchema }) {
    const header = `
      """ Autogenerated file. Do not edit manually. """
    `;

    const body = printSchema(graphqlSchema);
    const final = header + body;

    const filePath = path.join(
      this.resources.options.generatedDir,
      "schema.graphql"
    );
    ensureDirExists(filePath);
    writeFileSync(filePath, final, "utf8");
  }
}
