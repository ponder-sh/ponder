name: Main

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ["Node 20"]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Codegen
        run: cd packages/core/ && pnpm wagmi generate

      - name: Typecheck
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ["Node 20"]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build
        run: pnpm build

  test:
    name: Test [core]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        database: [Postgres, SQLite]
        node-version: ["Node 20"]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Postgres
        if: ${{ matrix.database == 'Postgres' }}
        uses: ikalnytskyi/action-setup-postgres@v4
        id: postgres

      - name: Setup
        uses: ./.github/actions/setup

      - name: Codegen
        run: cd packages/core/ && pnpm wagmi generate

      - name: Test
        run: pnpm --filter core test:typecheck
        env:
          DATABASE_URL: ${{ matrix.database == 'Postgres' && steps.postgres.outputs.connection-uri || '' }}

  test-create-ponder:
    name: Test [create-ponder]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        node-version: ["Node 20"]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Test
        run: pnpm --filter create-ponder test
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  test-common:
    name: Test [common]
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        runtime-version: ["Node", "Bun"]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Node
        if: ${{ matrix.runtime-version == 'Node' }}
        uses: actions/setup-node@v3
        with:
          cache: pnpm
          node-version: latest
      
      - name: Install Bun
        if: ${{ matrix.runtime-version == 'Bun' }}
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        shell: bash
        run: pnpm install --frozen-lockfile

      - name: Test Node
        if: ${{ matrix.runtime-version == 'Node' }}
        run: cd packages/common && pnpm test:typecheck

      - name: Test Bun
        if: ${{ matrix.runtime-version == 'Bun' }}
        run: cd packages/common && bun test


  test-utils:
    name: Test [utils]
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix: 
        viem-version: ['1', '2']
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          cache: pnpm
          node-version: latest

      - name: Install dependencies
        shell: bash
        run: pnpm install --frozen-lockfile

      - run: pnpm add -D -w viem@${{ matrix.viem-version }}

      - name: Test
        run: pnpm --filter utils test
        env:
          RPC_URL_ALCHEMY_1: ${{ secrets.RPC_URL_ALCHEMY_1 }}
          RPC_URL_INFURA_1: ${{ secrets.RPC_URL_INFURA_1 }}
          RPC_URL_QUICKNODE_1: ${{ secrets.RPC_URL_QUICKNODE_1 }}
